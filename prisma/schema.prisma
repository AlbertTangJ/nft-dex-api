generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["api", "public"]
}

model UserFollowing {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userAddress     String   @db.VarChar
  followerAddress String   @db.VarChar
  status          Int
  createTime      DateTime @default(now()) @db.Timestamp(6)
  createTimestamp Int
  updateTime      DateTime @db.Timestamp(6)
  updateTimestamp Int
  followerUser    User     @relation("followers", fields: [followerAddress], references: [userAddress])
  followingUser   User     @relation("followings", fields: [userAddress], references: [userAddress])

  @@unique([userAddress, followerAddress])
}

model User {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userAddress     String            @unique @db.VarChar(255)
  status          Int               @default(1)
  isDeleted       Int               @default(0)
  createTime      DateTime          @default(now()) @db.Timestamp(6)
  createTimestamp Int
  updateTime      DateTime          @db.Timestamp(6)
  updateTimestamp Int
  userAchievement UserAchievement[]
  followers       UserFollowing[]   @relation("followers")
  followings      UserFollowing[]   @relation("followings")
  userInfo        UserInfo?
}

model UserInfo {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userAddress     String    @unique @db.VarChar
  nonce           Int       @default(dbgenerated("floor((random() * (1000000)::double precision))"))
  username        String    @unique @db.VarChar
  about           String?
  updateNameTimes Int?      @default(0)
  updateTimestamp Int?
  createTimestamp Int?
  updateTime      DateTime? @db.Timestamp(6)
  createTime      DateTime? @default(now()) @db.Timestamp(6)
  points          Int       @default(0)
  user            User      @relation(fields: [userAddress], references: [userAddress])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model BadWords {
  id   String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word String? @db.VarChar

  @@ignore
}

model UserEventsLog {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event Json?
  name  String? @db.VarChar
}

model Achievement {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title               String            @db.VarChar
  description         String?           @db.VarChar
  icon                String?           @db.VarChar
  points              Int
  redeemLimit         Int               @default(1)
  repeatPeriod        RepeatPeriod
  createTime          DateTime          @default(now()) @db.Timestamp(6)
  updateTime          DateTime          @db.Timestamp(6)
  isGlobal            Boolean           @default(false)
  enabled             Boolean           @default(true)
  latestCompletedTime DateTime?         @db.Timestamp(6)
  userAchievement     UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userAddress   String      @db.VarChar
  achievementId String      @db.Uuid
  pointEarned   Int
  createTime    DateTime    @default(now()) @db.Timestamp(6)
  updateTime    DateTime    @db.Timestamp(6)
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userAddress], references: [userAddress])
}

enum RepeatPeriod {
  None
  Daily
  Weekly
  Monthly
  Yearly
}
